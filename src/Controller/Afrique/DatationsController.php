<?php
namespace App\Controller\Afrique;

use App\Controller\AppController;
use Cake\Event\Event;
use Cake\Routing\Router;

/**
 * Datations Controller
 *
 * @property \App\Model\Table\DatationsTable $Datations
 */
class DatationsController extends AppController
{


    public $helpers = array('GoogleMap');




    public function beforeFilter(Event $event)
    {
        parent::beforeFilter($event); // TODO: Change the autogenerated stub
        $this->Auth->allow();
    }






    /**
     * Index method
     *
     * @return \Cake\Network\Response|null
     */
    public function index()
    {
        if($this->request->is('ajax')){
            $this->RequestHandler->renderAs($this, 'json');
            $this->response->type('application/json');
            $this->viewBuilder()->layout('ajax');

            $query = $this->Datations->find()->order(['date_bp' => 'DESC']);
            if(count($this->request->data(['params']) != 0)){
                $params = $this->request->data(['params']);
                $conditions = $this->Search->searchConditions($params, 'Datations');
                $this->paginate = [
                    'contain' => ['Laboratoires', 'Sites']
                ];
                $datas = $this->paginate($query->where($conditions));
            }else{
                $datas = $this->paginate($query);
            }

            $this->set(compact('datas'));
            $this->set('_serialize', ['datas']);
        }else{
            $this->set('searchUrl', Router::url(['controller' => 'Datations', 'prefix' => 'afrique', '?' => ['page' => 1],]));

            $this->paginate = [
                'contain' => ['Laboratoires', 'Sites'],
                'limit' => 10
            ];
            $datations = $this->paginate($this->Datations);
            $this->set(compact('datations'));
            $this->set('activedatation', true);
            $this->set('_serialize', ['datations']);
            $this->viewBuilder()->layout('afriqueCentraleLayout');
        }
    }






    /**
     * View method
     *
     * @param string|null $id Datation id.
     * @return \Cake\Network\Response|null
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
        $datation = $this->Datations->get($id, [
            'contain' => ['Laboratoires', 'Sites', 'Materiels', 'Objets', 'Publications']
        ]);

        $this->set('datation', $datation);
        $this->set('_serialize', ['datation']);
        $this->set('activedatation', true);
        $this->viewBuilder()->layout('afriqueCentraleLayout');
    }







    public  function cartographie() {
        $query = $this->Datations->find()->where(['Datations.source_id' => 1]);
        $max = $query->select(['date_bp'])->max('date_bp')->toArray();
        $min = $query->select(['date_bp'])->min('date_bp')->toArray();

        if ($this->request->is('get')){
            $val =  ($max['date_bp'] + $min['date_bp']) / 2;

            $datations = $query->select(['id', 'date_bp', 'erreur_standard', 'date_calibree'])
                                ->contain   (['Sites' => function($q){ return $q->select(['id', 'name', 'latitude', 'longitude']);}])
                                ->andWhere(function($exp, $q) use ($val){
                                    $bornsup = $q->newExpr()->add('Datations.date_bp + Datations.erreur_standard');
                                    $borninf = $q->newExpr()->add('Datations.date_bp - Datations.erreur_standard');
                                    return $exp
                                        ->between($val, $borninf, $bornsup);
                                });

            $this->set('cartographie', true);
            $this->set('minimum', -1 * $max['date_bp']);
            $this->set('maximum', -1 * $min['date_bp']);
            $this->set(compact('datations'));
            $this->viewBuilder()->layout('afriqueCentraleLayout');

        }else{
            $this->RequestHandler->renderAs($this, 'json');
            $this->response->type('application/json');
            $this->viewBuilder()->layout('ajax');

            $params = $this->request->data(['params']);
            $val = $params['valeur'];
            $cumul = $params['statutCumul'];
            $maxVal = $params['minCumul'];
            $minVal = $params['maxCumul'];

            //Le cas ou on a une valeur issue de l'animation du curseur
            if ($val < 0){
                $val = $val * -1;
            }

            //Condition de recherche differente en fonction du choix de cumuler les valeurs ou pas
            if ($cumul === "non") {
                $datations = $query->select(['id', 'date_bp', 'erreur_standard', 'date_calibree'])
                    ->contain   (['Sites' => function($q){ return $q->select(['id', 'name', 'latitude', 'longitude']);}])
                    ->andWhere(function($exp, $q) use ($val){
                        $bornsup = $q->newExpr()->add('Datations.date_bp + Datations.erreur_standard');
                        $borninf = $q->newExpr()->add('Datations.date_bp - Datations.erreur_standard');
                        return $exp
                            ->between($val, $borninf, $bornsup);
                    });
            } else {
                if($maxVal < 0 ) {
                    $maxVal = $maxVal * (-1);
                }
                if($minVal < 0 ) {
                    $minVal = $minVal * (-1);
                }

                $datations = $query->select(['id', 'date_bp', 'erreur_standard', 'date_calibree'])
                    ->contain   (['Sites' => function($q){ return $q->select(['id', 'name', 'latitude', 'longitude']);}])
                    ->andWhere(function($exp, $q) use ($maxVal, $minVal){
                        $bornsup = $q->newExpr()->add('Datations.date_bp + Datations.erreur_standard');
                        $borninf = $q->newExpr()->add('Datations.date_bp - Datations.erreur_standard');
                        return $exp
                            ->lte($borninf, $maxVal)
                            ->gte($bornsup, $minVal);
                    });
            }

            $index = 0;
            $datas = [];
            foreach ($datations as $data){
                $datas[$index++] = $data;
            }

            $this->set(compact('datas'));

        }
    }






    public function getSessionDatations(){
        $this->RequestHandler->renderAs($this, 'json');
        $this->response->type('application/json');
        $this->viewBuilder()->layout('ajax');

        if($this->request->is('ajax')) {
            $datas = $this->request->session()->read('mapdatations');

            $this->set(compact('datas'));
            $this->set('_serialize', ['datas']);
        }
    }




//    function searchCarto($val = null, $cumul = null, $maxVal = null, $minVal = null) {
//        $query = $this->Datations->find();
//        $querycontains = $query->contain(['Sites' => function($q){
//            $q->select(['id', 'name']);
//        }]);
//        $max = $query->select(['date_bp'])->max('date_bp')->toArray();
//        $min = $query->select(['date_bp'])->min('date_bp')->toArray();
//
//        //Je suis au premier passage dans la méthode
//        if ($this->request->is('get')){
//
//        } else {
//            //Le cas ou on a une valeur issue de l'animation du curseur
//            if ($val < 0)
//                $val = $val * -1;
//            $this->Datation->recursive = 2;
//
//            //Condition de recherche differente en fonction du choix de cumuler les valeurs ou pas
//            if ($cumul === "non") {
//                $conditions = array(
//                    'conditions' => array(
//                        $val . ' between Datation.date_bp - Datation.erreur_standard and Datation.date_bp + Datation.erreur_standard'
//                    ),
//                );
//                $resultat = $this->Datation->find('all', $conditions);
//            } else {
//                if($maxVal < 0 )
//                    $maxVal = $maxVal * (-1);
//                if($minVal < 0 )
//                    $minVal = $minVal * (-1);
//                //A ne pas éffacer
//                $conditions = array(
//                    'conditions' => array(
//                        'Datation.date_bp - Datation.erreur_standard <= ' . $maxVal . 'and Datation.date_bp + Datation.erreur_standard >= ' . $minVal
//                    ),
//                );
//                $resultat = $this->Datation->find('all', $conditions);
//            }
//            $this->autoRender = false;
//            header('Content-type: application/json');
//            echo json_encode($resultat);
//        }
//    }

//    public function search(){
//        if($this->request->is('ajax')) {
//            // Force le controller à rendre une réponse JSON.
//            $this->RequestHandler->renderAs($this, 'json');
//            // Définit le type de réponse de la requete AJAX
//            $this->response->type('application/json');
//
//            $query = $this->Datations->find()->order(['date_bp' => 'DESC']);
//            $params = $this->request->data(['params']);
//            $conditions = $this->Search->searchConditions($params, 'Datations');
//            $this->paginate = [
//                'contain' => ['Laboratoires', 'Sites']
//            ];
////            $conditions = ['source_id'=> 1];
//            // Find pour récupérer les sites avec le bon serveur
//            $datas = $this->paginate($query->where($conditions));
//
//
//            // Chargement du layout AJAX
//            $this->viewBuilder()->layout('ajax');
//            // Créer un contexte sites à renvoyer
//            $this->set(compact('datas'));
////            $this->set('datas', $conditions);
//            // Généreration des vues de données
//            $this->set('_serialize', ['datas']);
//        }
//    }

}
